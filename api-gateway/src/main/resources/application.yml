server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        # yml 이용해 선언적 방식으로 라우팅 구현
        # @Configuration 이용해 프로그래밍 방식으로도 라우팅 구현 가능
        - id: open-api
          uri: http://localhost:8090
          predicates:
            - Path=/api/member/signup/**, /api/member/signin/** # 회원가입과 로그인은 필터 적용 안함
        - id: customer-api
          uri: http://localhost:8090
          predicates:
            - Path=/api/member/customer/*
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer
                role: ROLE_CUSTOMER
        - id: seller-api
          uri: http://localhost:8090
          predicates:
            - Path=/api/member/seller/*
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer
                role: ROLE_SELLER
        - id: store-search-api
          uri: http://localhost:8091
          predicates:
            - Path=/api/store/search/**
        - id: item-search-api
          uri: http://localhost:8091
          predicates:
            - Path=/api/store/item/search/**
        - id: cart-api
          uri: http://localhost:8091
          predicates:
            - Path=/api/store/cart/**
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer
                role: ROLE_CUSTOMER
        - id: store-api
          uri: http://localhost:8091
          predicates:
            - Path=/api/store/**
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer
                role: ROLE_SELLER
        - id: order-customer-api
          uri: http://localhost:8092
          predicates:
            - Path=/api/order/customer/**
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer
                role: ROLE_CUSTOMER
        - id: order-seller-api
          uri: http://localhost:8092
          predicates:
            - Path=/api/order/seller/**
          filters:
            - name: AuthorizationHeaderFilter
              args:
                headerName: Authorization
                granted: Bearer
                role: ROLE_SELLER

    config:
      label: master
      profile: dev
      uri: http://localhost:8888 # jwt secret key 있는 config server와 연결
      name: api-gateway

  config:
    import: optional:configserver:http://localhost:8888 # jwt secret key 있는 config server와 연결 & optional : config server 에서 응답을 받지 못해도 client 애플리케이션은 구동

  profiles:
    active: dev

  jwt:
    secret: 4c216af15dddd3987142b0e1a66489f464623a449d4c0d12506fd30b376e6c7dc5c3d9f50adb8b74297a0c2e863203adaf76c4f1f630b3a11902e6dc40151214

eureka: # eureka client 등록
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: "*"


logging:
  level:
    org.springframework.security: debug
#    root: debug