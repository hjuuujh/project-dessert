version: "3"
services:
  #  db:
  #    image: mysql:8.0.22
  #    container_name: dessert-db
  #    cap_add:
  #      - SYS_NICE
  #    environment:
  #      MYSQL_ROOT_HOST: '%'
  #      MYSQL_ROOT_PASSWORD: 1234
  #    healthcheck:
  #      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
  #      interval: 3s
  #      timeout: 20s
  #    ports:
  #      - 3306:3306
  #    volumes:
  #      - ./db/data/member:/var/lib/mysql
  #      - ./init:/docker-entrypoint-initdb.d
  #    networks:
  #      - dessert-network

  web:
    image: nginx
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ./spring/conf.d:/etc/nginx
    networks:
      - dessert-network

  redis:
    image: redis
    container_name: dessert-redis
    hostname: redis
    ports:
      - 6379:6379
    volumes:
      - ./redis-db/data:/data
      - ./redis-db/conf/redis.conf:/etc/redis/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    networks:
      - dessert-network

  config-server:
    image: hjuuujh/config-server:1.0
    #    build:
    #      context: ./config-server
    ports:
      - 8888:8888
    container_name: dessert-config-server
    #    healthcheck:
    #      test: curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1
    #      interval: 2s
    #      timeout: 3s
    #      retries: 5
    environment:
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
    networks:
      - dessert-network

  eureka-server:
    image: hjuuujh/eureka-server:4.0
    #    build:
    #      context: ./eureka-server
    ports:
      - 8761:8761
    container_name: dessert-eureka-server
    networks:
      - dessert-network

  api-gateway:
    image: hjuuujh/api-gateway:1.0
    #    build:
    #      context: ./api-gateway
    ports:
      - 8080:8080
    container_name: dessert-api-gateway
    depends_on:
      eureka-server:
        condition: service_started
      config-server:
        condition: service_started
      order-api:
        condition: service_started
      store-api:
        condition: service_started
      member-api:
        condition: service_started
    environment: # docker-compose.yml에 설정한 환경변수가 기존의 환경변수 덮어씌움
      spring.cloud.config.uri: http://config-server:8888
      spring.config.import: optional:configserver:http://config-server:8888
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: open-api
      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: http://member-api:8090
      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path= /api/member/signup/**, /api/member/signin/**
      spring.cloud.gateway.routes[1].id: customer-api
      spring.cloud.gateway.routes[1].uri: http://member-api:8090
      spring.cloud.gateway.routes[1].predicates[0]: Path= /api/member/customer/*
      spring.cloud.gateway.routes[2].id: seller-api
      spring.cloud.gateway.routes[2].uri: http://member-api:8090
      spring.cloud.gateway.routes[2].predicates[0]: Path= /api/member/seller/*
      spring.cloud.gateway.routes[3].id: store-search-api
      spring.cloud.gateway.routes[3].uri: http://store-api:8091
      spring.cloud.gateway.routes[3].predicates[0]: Path= /api/store/search/**
      spring.cloud.gateway.routes[4].id: item-search-api
      spring.cloud.gateway.routes[4].uri: http://store-api:8091
      spring.cloud.gateway.routes[4].predicates[0]: Path= /api/store/item/search/**
      spring.cloud.gateway.routes[5].id: cart-api
      spring.cloud.gateway.routes[5].uri: http://store-api:8091
      spring.cloud.gateway.routes[5].predicates[0]: Path= /api/store/cart/**
      spring.cloud.gateway.routes[6].id: store-api
      spring.cloud.gateway.routes[6].uri: http://store-api:8091
      spring.cloud.gateway.routes[6].predicates[0]: Path= /api/store/**
      spring.cloud.gateway.routes[7].id: order-customer-api
      spring.cloud.gateway.routes[7].uri: http://order-api:8092
      spring.cloud.gateway.routes[7].predicates[0]: Path= /api/order/customer/**
      spring.cloud.gateway.routes[8].id: order-seller-api
      spring.cloud.gateway.routes[8].uri: http://order-api:8092
      spring.cloud.gateway.routes[8].predicates[0]: Path= /api/order/seller/**

    networks:
      - dessert-network

  member-api:
    image: hjuuujh/member-api:2.0
    ports:
      - 8090:8090
    environment:
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.cloud.config.uri: http://config-server:8888
      spring.config.import: optional:configserver:http://config-server:8888
    depends_on:
      #      db:
      #        condition: service_healthy
      redis:
        condition: service_started
      eureka-server:
        condition: service_started
      config-server:
        condition: service_started
    container_name: dessert-member-api
    networks:
      - dessert-network

  store-api:
    image: hjuuujh/store-api:1.0
    #    build:
    #      context: ./store-api
    ports:
      - 8091:8091
    environment:
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.cloud.config.uri: http://config-server:8888
      spring.config.import: optional:configserver:http://config-server:8888
    depends_on:
      #      db:
      #        condition: service_healthy
      redis:
        condition: service_started
      eureka-server:
        condition: service_started
      config-server:
        condition: service_started
    container_name: dessert-store-api
    networks:
      - dessert-network

  order-api:
    image: hjuuujh/order-api:1.0
    #    build:
    #      context: ./order-api
    ports:
      - 8092:8092
    environment:
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
      spring.cloud.config.uri: http://config-server:8888
      spring.config.import: optional:configserver:http://config-server:8888
    depends_on:
      #      db:
      #        condition: service_healthy
      eureka-server:
        condition: service_started
      config-server:
        condition: service_started
    container_name: dessert-order-api
    networks:
      - dessert-network

  swagger-integrated:
    image: swaggerapi/swagger-ui
    container_name: swagger-integrated
    ports:
      - 8000:8080
    restart: on-failure
    environment:
      - URLS=
        [
        {url:'/docs/member-api-openapi3.yaml',name:'member-api'},
        {url:'http://dessert-alb-166253251.ap-northeast-2.elb.amazonaws.com:8091/docs/openapi/openapi3.yaml',name:'store-api'},
        {url:'http://dessert-alb-166253251.ap-northeast-2.elb.amazonaws.com:8092/docs/openapi/openapi3.yaml',name:'order-api'}
        ]
    volumes:
      - ./openapi:/usr/share/nginx/html/docs
      - ./openapi:/docs
    networks:
      - dessert-network

networks:
  dessert-network: